//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

public static unsafe class refresh
{
    private const string LibraryName = "Refresh";

    public enum Refresh_PresentMode : uint
    {
        REFRESH_PRESENTMODE_IMMEDIATE = 0U,
        REFRESH_PRESENTMODE_MAILBOX = 1U,
        REFRESH_PRESENTMODE_FIFO = 2U,
        REFRESH_PRESENTMODE_FIFO_RELAXED = 3U
    }

    public enum Refresh_IndexElementSize : uint
    {
        REFRESH_INDEXELEMENTSIZE_16BIT = 0U,
        REFRESH_INDEXELEMENTSIZE_32BIT = 1U
    }

    public enum Refresh_ColorFormat : uint
    {
        REFRESH_COLORFORMAT_R8G8B8A8 = 0U,
        REFRESH_COLORFORMAT_R5G6B5 = 1U,
        REFRESH_COLORFORMAT_A1R5G5B5 = 2U,
        REFRESH_COLORFORMAT_B4G4R4A4 = 3U,
        REFRESH_COLORFORMAT_BC1 = 4U,
        REFRESH_COLORFORMAT_BC2 = 5U,
        REFRESH_COLORFORMAT_BC3 = 6U,
        REFRESH_COLORFORMAT_R8G8_SNORM = 7U,
        REFRESH_COLORFORMAT_R8G8B8A8_SNORM = 8U,
        REFRESH_COLORFORMAT_A2R10G10B10 = 9U,
        REFRESH_COLORFORMAT_R16G16 = 10U,
        REFRESH_COLORFORMAT_R16G16B16A16 = 11U,
        REFRESH_COLORFORMAT_R8 = 12U,
        REFRESH_COLORFORMAT_R32_SFLOAT = 13U,
        REFRESH_COLORFORMAT_R32G32_SFLOAT = 14U,
        REFRESH_COLORFORMAT_R32G32B32A32_SFLOAT = 15U,
        REFRESH_COLORFORMAT_R16_SFLOAT = 16U,
        REFRESH_COLORFORMAT_R16G16_SFLOAT = 17U,
        REFRESH_COLORFORMAT_R16G16B16A16_SFLOAT = 18U
    }

    public enum Refresh_SampleCount : uint
    {
        REFRESH_SAMPLECOUNT_1 = 0U,
        REFRESH_SAMPLECOUNT_2 = 1U,
        REFRESH_SAMPLECOUNT_4 = 2U,
        REFRESH_SAMPLECOUNT_8 = 3U,
        REFRESH_SAMPLECOUNT_16 = 4U,
        REFRESH_SAMPLECOUNT_32 = 5U,
        REFRESH_SAMPLECOUNT_64 = 6U
    }

    public enum Refresh_LoadOp : uint
    {
        REFRESH_LOADOP_LOAD = 0U,
        REFRESH_LOADOP_CLEAR = 1U,
        REFRESH_LOADOP_DONT_CARE = 2U
    }

    public enum Refresh_StoreOp : uint
    {
        REFRESH_STOREOP_STORE = 0U,
        REFRESH_STOREOP_DONT_CARE = 1U
    }

    public enum Refresh_DepthFormat : uint
    {
        REFRESH_DEPTHFORMAT_D16_UNORM = 0U,
        REFRESH_DEPTHFORMAT_D32_SFLOAT = 1U,
        REFRESH_DEPTHFORMAT_D16_UNORM_S8_UINT = 2U,
        REFRESH_DEPTHFORMAT_D32_SFLOAT_S8_UINT = 3U
    }

    public enum Refresh_VertexInputRate : uint
    {
        REFRESH_VERTEXINPUTRATE_VERTEX = 0U,
        REFRESH_VERTEXINPUTRATE_INSTANCE = 1U
    }

    public enum Refresh_VertexElementFormat : uint
    {
        REFRESH_VERTEXELEMENTFORMAT_SINGLE = 0U,
        REFRESH_VERTEXELEMENTFORMAT_VECTOR2 = 1U,
        REFRESH_VERTEXELEMENTFORMAT_VECTOR3 = 2U,
        REFRESH_VERTEXELEMENTFORMAT_VECTOR4 = 3U,
        REFRESH_VERTEXELEMENTFORMAT_COLOR = 4U,
        REFRESH_VERTEXELEMENTFORMAT_BYTE4 = 5U,
        REFRESH_VERTEXELEMENTFORMAT_SHORT2 = 6U,
        REFRESH_VERTEXELEMENTFORMAT_SHORT4 = 7U,
        REFRESH_VERTEXELEMENTFORMAT_NORMALIZEDSHORT2 = 8U,
        REFRESH_VERTEXELEMENTFORMAT_NORMALIZEDSHORT4 = 9U,
        REFRESH_VERTEXELEMENTFORMAT_HALFVECTOR2 = 10U,
        REFRESH_VERTEXELEMENTFORMAT_HALFVECTOR4 = 11U
    }

    public enum Refresh_PrimitiveType : uint
    {
        REFRESH_PRIMITIVETYPE_POINTLIST = 0U,
        REFRESH_PRIMITIVETYPE_LINELIST = 1U,
        REFRESH_PRIMITIVETYPE_LINESTRIP = 2U,
        REFRESH_PRIMITIVETYPE_TRIANGLELIST = 3U,
        REFRESH_PRIMITIVETYPE_TRIANGLESTRIP = 4U
    }

    public enum Refresh_FillMode : uint
    {
        REFRESH_FILLMODE_FILL = 0U,
        REFRESH_FILLMODE_LINE = 1U,
        REFRESH_FILLMODE_POINT = 2U
    }

    public enum Refresh_CullMode : uint
    {
        REFRESH_CULLMODE_NONE = 0U,
        REFRESH_CULLMODE_FRONT = 1U,
        REFRESH_CULLMODE_BACK = 2U,
        REFRESH_CULLMODE_FRONT_AND_BACK = 3U
    }

    public enum Refresh_FrontFace : uint
    {
        REFRESH_FRONTFACE_COUNTER_CLOCKWISE = 0U,
        REFRESH_FRONTFACE_CLOCKWISE = 1U
    }

    public enum Refresh_CompareOp : uint
    {
        REFRESH_COMPAREOP_NEVER = 0U,
        REFRESH_COMPAREOP_LESS = 1U,
        REFRESH_COMPAREOP_EQUAL = 2U,
        REFRESH_COMPAREOP_LESS_OR_EQUAL = 3U,
        REFRESH_COMPAREOP_GREATER = 4U,
        REFRESH_COMPAREOP_NOT_EQUAL = 5U,
        REFRESH_COMPAREOP_GREATER_OR_EQUAL = 6U,
        REFRESH_COMPAREOP_ALWAYS = 7U
    }

    public enum Refresh_StencilOp : uint
    {
        REFRESH_STENCILOP_KEEP = 0U,
        REFRESH_STENCILOP_ZERO = 1U,
        REFRESH_STENCILOP_REPLACE = 2U,
        REFRESH_STENCILOP_INCREMENT_AND_CLAMP = 3U,
        REFRESH_STENCILOP_DECREMENT_AND_CLAMP = 4U,
        REFRESH_STENCILOP_INVERT = 5U,
        REFRESH_STENCILOP_INCREMENT_AND_WRAP = 6U,
        REFRESH_STENCILOP_DECREMENT_AND_WRAP = 7U
    }

    public enum Refresh_LogicOp : uint
    {
        REFRESH_LOGICOP_CLEAR = 0U,
        REFRESH_LOGICOP_AND = 1U,
        REFRESH_LOGICOP_AND_REVERSE = 2U,
        REFRESH_LOGICOP_COPY = 3U,
        REFRESH_LOGICOP_AND_INVERTED = 4U,
        REFRESH_LOGICOP_NO_OP = 5U,
        REFRESH_LOGICOP_XOR = 6U,
        REFRESH_LOGICOP_OR = 7U,
        REFRESH_LOGICOP_NOR = 8U,
        REFRESH_LOGICOP_EQUIVALENT = 9U,
        REFRESH_LOGICOP_INVERT = 10U,
        REFRESH_LOGICOP_OR_REVERSE = 11U,
        REFRESH_LOGICOP_COPY_INVERTED = 12U,
        REFRESH_LOGICOP_OR_INVERTED = 13U,
        REFRESH_LOGICOP_NAND = 14U,
        REFRESH_LOGICOP_SET = 15U
    }

    public enum Refresh_BlendFactor : uint
    {
        REFRESH_BLENDFACTOR_ZERO = 0U,
        REFRESH_BLENDFACTOR_ONE = 1U,
        REFRESH_BLENDFACTOR_SRC_COLOR = 2U,
        REFRESH_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 3U,
        REFRESH_BLENDFACTOR_DST_COLOR = 4U,
        REFRESH_BLENDFACTOR_ONE_MINUS_DST_COLOR = 5U,
        REFRESH_BLENDFACTOR_SRC_ALPHA = 6U,
        REFRESH_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 7U,
        REFRESH_BLENDFACTOR_DST_ALPHA = 8U,
        REFRESH_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 9U,
        REFRESH_BLENDFACTOR_CONSTANT_COLOR = 10U,
        REFRESH_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 11U,
        REFRESH_BLENDFACTOR_CONSTANT_ALPHA = 12U,
        REFRESH_BLENDFACTOR_ONE_MINUS_CONSTANT_ALPHA = 13U,
        REFRESH_BLENDFACTOR_SRC_ALPHA_SATURATE = 14U,
        REFRESH_BLENDFACTOR_SRC1_COLOR = 15U,
        REFRESH_BLENDFACTOR_ONE_MINUS_SRC1_COLOR = 16U,
        REFRESH_BLENDFACTOR_SRC1_ALPHA = 17U,
        REFRESH_BLENDFACTOR_ONE_MINUS_SRC1_ALPHA = 18U
    }

    public enum Refresh_BlendOp : uint
    {
        REFRESH_BLENDOP_ADD = 0U,
        REFRESH_BLENDOP_SUBTRACT = 1U,
        REFRESH_BLENDOP_REVERSE_SUBTRACT = 2U,
        REFRESH_BLENDOP_MIN = 3U,
        REFRESH_BLENDOP_MAX = 4U
    }

    public enum Refresh_Filter : uint
    {
        REFRESH_FILTER_NEAREST = 0U,
        REFRESH_FILTER_LINEAR = 1U,
        REFRESH_FILTER_CUBIC = 2U
    }

    public enum Refresh_SamplerMipmapMode : uint
    {
        REFRESH_SAMPLERMIPMAPMODE_NEAREST = 0U,
        REFRESH_SAMPLERMIPMAPMODE_LINEAR = 1U
    }

    public enum Refresh_SamplerAddressMode : uint
    {
        REFRESH_SAMPLERADDRESSMODE_REPEAT = 0U,
        REFRESH_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1U,
        REFRESH_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2U,
        REFRESH_SAMPLERADDRESSMODE_CLAMP_TO_BORDER = 3U
    }

    public enum Refresh_BorderColor : uint
    {
        REFRESH_BORDERCOLOR_FLOAT_TRANSPARENT_BLACK = 0U,
        REFRESH_BORDERCOLOR_INT_TRANSPARENT_BLACK = 1U,
        REFRESH_BORDERCOLOR_FLOAT_OPAQUE_BLACK = 2U,
        REFRESH_BORDERCOLOR_INT_OPAQUE_BLACK = 3U,
        REFRESH_BORDERCOLOR_FLOAT_OPAQUE_WHITE = 4U,
        REFRESH_BORDERCOLOR_INT_OPAQUE_WHITE = 5U
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct Refresh_PresentationParameters
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public void* deviceWindowHandle;

        [FieldOffset(8)] /* size = 4, padding = 4 */
        public Refresh_PresentMode presentMode;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct Refresh_Rect
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public int x;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public int y;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public int w;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public int h;
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct Refresh_Color
    {
        [FieldOffset(0)] /* size = 1, padding = 0 */
        public byte r;

        [FieldOffset(1)] /* size = 1, padding = 0 */
        public byte g;

        [FieldOffset(2)] /* size = 1, padding = 0 */
        public byte b;

        [FieldOffset(3)] /* size = 1, padding = 0 */
        public byte a;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct Refresh_ColorTargetDescription
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public Refresh_ColorFormat format;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_SampleCount multisampleCount;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_LoadOp loadOp;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public Refresh_StoreOp storeOp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct Refresh_DepthStencilTargetDescription
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public Refresh_DepthFormat depthFormat;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_LoadOp loadOp;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_StoreOp storeOp;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public Refresh_LoadOp stencilLoadOp;

        [FieldOffset(16)] /* size = 4, padding = 0 */
        public Refresh_StoreOp stencilStoreOp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct Refresh_RenderPassCreateInfo
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public Refresh_ColorTargetDescription* colorTargetDescriptions;

        [FieldOffset(8)] /* size = 4, padding = 4 */
        public uint colorTargetCount;

        [FieldOffset(16)] /* size = 8, padding = 0 */
        public Refresh_DepthStencilTargetDescription* depthTargetDescription;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct Refresh_ShaderStageState
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public IntPtr shaderModule;

        [FieldOffset(8)] /* size = 8, padding = 0 */
        public byte* entryPointName;

        [FieldOffset(16)] /* size = 8, padding = 0 */
        public ulong uniformBufferSize;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct Refresh_ComputePipelineLayoutCreateInfo
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public uint bufferBindingCount;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public uint imageBindingCount;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct Refresh_ComputePipelineCreateInfo
    {
        [FieldOffset(0)] /* size = 24, padding = 0 */
        public Refresh_ShaderStageState computeShaderState;

        [FieldOffset(24)] /* size = 8, padding = 0 */
        public Refresh_ComputePipelineLayoutCreateInfo pipelineLayoutCreateInfo;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct Refresh_VertexBinding
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public uint binding;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public uint stride;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_VertexInputRate inputRate;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct Refresh_VertexAttribute
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public uint location;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public uint binding;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_VertexElementFormat format;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public uint offset;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct Refresh_VertexInputState
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public Refresh_VertexBinding* vertexBindings;

        [FieldOffset(8)] /* size = 4, padding = 4 */
        public uint vertexBindingCount;

        [FieldOffset(16)] /* size = 8, padding = 0 */
        public Refresh_VertexAttribute* vertexAttributes;

        [FieldOffset(24)] /* size = 4, padding = 4 */
        public uint vertexAttributeCount;
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct Refresh_TopologyState
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public Refresh_PrimitiveType topology;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct Refresh_Viewport
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public float x;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public float y;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public float w;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public float h;

        [FieldOffset(16)] /* size = 4, padding = 0 */
        public float minDepth;

        [FieldOffset(20)] /* size = 4, padding = 0 */
        public float maxDepth;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct Refresh_ViewportState
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public Refresh_Viewport* viewports;

        [FieldOffset(8)] /* size = 4, padding = 4 */
        public uint viewportCount;

        [FieldOffset(16)] /* size = 8, padding = 0 */
        public Refresh_Rect* scissors;

        [FieldOffset(24)] /* size = 4, padding = 4 */
        public uint scissorCount;
    }

    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct Refresh_RasterizerState
    {
        [FieldOffset(0)] /* size = 1, padding = 3 */
        public byte depthClampEnable;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_FillMode fillMode;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_CullMode cullMode;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public Refresh_FrontFace frontFace;

        [FieldOffset(16)] /* size = 1, padding = 3 */
        public byte depthBiasEnable;

        [FieldOffset(20)] /* size = 4, padding = 0 */
        public float depthBiasConstantFactor;

        [FieldOffset(24)] /* size = 4, padding = 0 */
        public float depthBiasClamp;

        [FieldOffset(28)] /* size = 4, padding = 0 */
        public float depthBiasSlopeFactor;

        [FieldOffset(32)] /* size = 4, padding = 0 */
        public float lineWidth;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct Refresh_MultisampleState
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public Refresh_SampleCount multisampleCount;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public uint sampleMask;
    }

    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct Refresh_StencilOpState
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public Refresh_StencilOp failOp;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_StencilOp passOp;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_StencilOp depthFailOp;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public Refresh_CompareOp compareOp;

        [FieldOffset(16)] /* size = 4, padding = 0 */
        public uint compareMask;

        [FieldOffset(20)] /* size = 4, padding = 0 */
        public uint writeMask;

        [FieldOffset(24)] /* size = 4, padding = 0 */
        public uint reference;
    }

    [StructLayout(LayoutKind.Explicit, Size = 76, Pack = 4)]
    public struct Refresh_DepthStencilState
    {
        [FieldOffset(0)] /* size = 1, padding = 0 */
        public byte depthTestEnable;

        [FieldOffset(1)] /* size = 1, padding = 2 */
        public byte depthWriteEnable;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_CompareOp compareOp;

        [FieldOffset(8)] /* size = 1, padding = 0 */
        public byte depthBoundsTestEnable;

        [FieldOffset(9)] /* size = 1, padding = 2 */
        public byte stencilTestEnable;

        [FieldOffset(12)] /* size = 28, padding = 0 */
        public Refresh_StencilOpState frontStencilState;

        [FieldOffset(40)] /* size = 28, padding = 0 */
        public Refresh_StencilOpState backStencilState;

        [FieldOffset(68)] /* size = 4, padding = 0 */
        public float minDepthBounds;

        [FieldOffset(72)] /* size = 4, padding = 0 */
        public float maxDepthBounds;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct Refresh_ColorTargetBlendState
    {
        [FieldOffset(0)] /* size = 1, padding = 3 */
        public byte blendEnable;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_BlendFactor srcColorBlendFactor;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_BlendFactor dstColorBlendFactor;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public Refresh_BlendOp colorBlendOp;

        [FieldOffset(16)] /* size = 4, padding = 0 */
        public Refresh_BlendFactor srcAlphaBlendFactor;

        [FieldOffset(20)] /* size = 4, padding = 0 */
        public Refresh_BlendFactor dstAlphaBlendFactor;

        [FieldOffset(24)] /* size = 4, padding = 0 */
        public Refresh_BlendOp alphaBlendOp;

        [FieldOffset(28)] /* size = 4, padding = 0 */
        public Refresh_ColorComponentFlags colorWriteMask;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct Refresh_ColorBlendState
    {
        [FieldOffset(0)] /* size = 1, padding = 3 */
        public byte logicOpEnable;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_LogicOp logicOp;

        [FieldOffset(8)] /* size = 8, padding = 0 */
        public Refresh_ColorTargetBlendState* blendStates;

        [FieldOffset(16)] /* size = 4, padding = 0 */
        public uint blendStateCount;

        [FieldOffset(20)] /* size = 16, padding = 4 */
        public fixed float blendConstants[4]; /* original type is `float [4]` */
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct Refresh_GraphicsPipelineLayoutCreateInfo
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public uint vertexSamplerBindingCount;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public uint fragmentSamplerBindingCount;
    }

    [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
    public struct Refresh_GraphicsPipelineCreateInfo
    {
        [FieldOffset(0)] /* size = 24, padding = 0 */
        public Refresh_ShaderStageState vertexShaderState;

        [FieldOffset(24)] /* size = 24, padding = 0 */
        public Refresh_ShaderStageState fragmentShaderState;

        [FieldOffset(48)] /* size = 32, padding = 0 */
        public Refresh_VertexInputState vertexInputState;

        [FieldOffset(80)] /* size = 4, padding = 4 */
        public Refresh_TopologyState topologyState;

        [FieldOffset(88)] /* size = 32, padding = 0 */
        public Refresh_ViewportState viewportState;

        [FieldOffset(120)] /* size = 36, padding = 0 */
        public Refresh_RasterizerState rasterizerState;

        [FieldOffset(156)] /* size = 8, padding = 0 */
        public Refresh_MultisampleState multisampleState;

        [FieldOffset(164)] /* size = 76, padding = 0 */
        public Refresh_DepthStencilState depthStencilState;

        [FieldOffset(240)] /* size = 40, padding = 0 */
        public Refresh_ColorBlendState colorBlendState;

        [FieldOffset(280)] /* size = 8, padding = 0 */
        public Refresh_GraphicsPipelineLayoutCreateInfo pipelineLayoutCreateInfo;

        [FieldOffset(288)] /* size = 8, padding = 0 */
        public IntPtr renderPass;
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 4)]
    public struct Refresh_SamplerStateCreateInfo
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public Refresh_Filter minFilter;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public Refresh_Filter magFilter;

        [FieldOffset(8)] /* size = 4, padding = 0 */
        public Refresh_SamplerMipmapMode mipmapMode;

        [FieldOffset(12)] /* size = 4, padding = 0 */
        public Refresh_SamplerAddressMode addressModeU;

        [FieldOffset(16)] /* size = 4, padding = 0 */
        public Refresh_SamplerAddressMode addressModeV;

        [FieldOffset(20)] /* size = 4, padding = 0 */
        public Refresh_SamplerAddressMode addressModeW;

        [FieldOffset(24)] /* size = 4, padding = 0 */
        public float mipLodBias;

        [FieldOffset(28)] /* size = 1, padding = 3 */
        public byte anisotropyEnable;

        [FieldOffset(32)] /* size = 4, padding = 0 */
        public float maxAnisotropy;

        [FieldOffset(36)] /* size = 1, padding = 3 */
        public byte compareEnable;

        [FieldOffset(40)] /* size = 4, padding = 0 */
        public Refresh_CompareOp compareOp;

        [FieldOffset(44)] /* size = 4, padding = 0 */
        public float minLod;

        [FieldOffset(48)] /* size = 4, padding = 0 */
        public float maxLod;

        [FieldOffset(52)] /* size = 4, padding = 0 */
        public Refresh_BorderColor borderColor;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct Refresh_FramebufferCreateInfo
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public IntPtr renderPass;

        [FieldOffset(8)] /* size = 8, padding = 0 */
        public IntPtr pColorTargets;

        [FieldOffset(16)] /* size = 4, padding = 4 */
        public uint colorTargetCount;

        [FieldOffset(24)] /* size = 8, padding = 0 */
        public IntPtr pDepthStencilTarget;

        [FieldOffset(32)] /* size = 4, padding = 0 */
        public uint width;

        [FieldOffset(36)] /* size = 4, padding = 0 */
        public uint height;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct Refresh_ShaderModuleCreateInfo
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public ulong codeSize;

        [FieldOffset(8)] /* size = 8, padding = 0 */
        public uint* byteCode;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct Refresh_TextureSlice
    {
        [FieldOffset(0)] /* size = 8, padding = 0 */
        public IntPtr texture;

        [FieldOffset(8)] /* size = 16, padding = 0 */
        public Refresh_Rect rectangle;

        [FieldOffset(24)] /* size = 4, padding = 0 */
        public uint depth;

        [FieldOffset(28)] /* size = 4, padding = 0 */
        public uint layer;

        [FieldOffset(32)] /* size = 4, padding = 4 */
        public uint level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct Refresh_DepthStencilValue
    {
        [FieldOffset(0)] /* size = 4, padding = 0 */
        public float depth;

        [FieldOffset(4)] /* size = 4, padding = 0 */
        public uint stencil;
    }

    [DllImport(LibraryName)]
    public static extern uint Refresh_LinkedVersion();

    // [DllImport(LibraryName)]
    // public static extern void Refresh_HookLogFunctions(Refresh_LogFunc info, Refresh_LogFunc warn, Refresh_LogFunc error);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateDevice(ref Refresh_PresentationParameters presentationParameters, byte debugMode);

    [DllImport(LibraryName)]
    public static extern void Refresh_DestroyDevice(IntPtr device);

    [DllImport(LibraryName)]
    public static extern void Refresh_Clear(IntPtr device, IntPtr commandBuffer, Refresh_Rect* clearRect, Refresh_ClearOptions options, Refresh_Color* colors, uint colorCount, float depth, int stencil);

    [DllImport(LibraryName)]
    public static extern void Refresh_DrawInstancedPrimitives(IntPtr device, IntPtr commandBuffer, uint baseVertex, uint minVertexIndex, uint numVertices, uint startIndex, uint primitiveCount, uint instanceCount, IntPtr indices, Refresh_IndexElementSize indexElementSize, uint vertexParamOffset, uint fragmentParamOffset);

    [DllImport(LibraryName)]
    public static extern void Refresh_DrawIndexedPrimitives(IntPtr device, IntPtr commandBuffer, uint baseVertex, uint minVertexIndex, uint numVertices, uint startIndex, uint primitiveCount, IntPtr indices, Refresh_IndexElementSize indexElementSize, uint vertexParamOffset, uint fragmentParamOffset);

    [DllImport(LibraryName)]
    public static extern void Refresh_DrawPrimitives(IntPtr device, IntPtr commandBuffer, uint vertexStart, uint primitiveCount, uint vertexParamOffset, uint fragmentParamOffset);

    [DllImport(LibraryName)]
    public static extern void Refresh_DispatchCompute(IntPtr device, IntPtr commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ, uint computeParamOffset);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateRenderPass(IntPtr device, ref Refresh_RenderPassCreateInfo renderPassCreateInfo);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateComputePipeline(IntPtr device, ref Refresh_ComputePipelineCreateInfo pipelineCreateInfo);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateGraphicsPipeline(IntPtr device, ref Refresh_GraphicsPipelineCreateInfo pipelineCreateInfo);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateSampler(IntPtr device, ref Refresh_SamplerStateCreateInfo samplerStateCreateInfo);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateFramebuffer(IntPtr device, ref Refresh_FramebufferCreateInfo framebufferCreateInfo);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateShaderModule(IntPtr device, ref Refresh_ShaderModuleCreateInfo shaderModuleCreateInfo);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateTexture2D(IntPtr device, Refresh_ColorFormat format, uint width, uint height, uint levelCount, Refresh_TextureUsageFlags usageFlags);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateTexture3D(IntPtr device, Refresh_ColorFormat format, uint width, uint height, uint depth, uint levelCount, Refresh_TextureUsageFlags usageFlags);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateTextureCube(IntPtr device, Refresh_ColorFormat format, uint size, uint levelCount, Refresh_TextureUsageFlags usageFlags);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateColorTarget(IntPtr device, Refresh_SampleCount multisampleCount, ref Refresh_TextureSlice textureSlice);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateDepthStencilTarget(IntPtr device, uint width, uint height, Refresh_DepthFormat format);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_CreateBuffer(IntPtr device, Refresh_BufferUsageFlags usageFlags, uint sizeInBytes);

    [DllImport(LibraryName)]
    public static extern void Refresh_SetTextureData(IntPtr driverData, ref Refresh_TextureSlice textureSlice, void* data, uint dataLengthInBytes);

    [DllImport(LibraryName)]
    public static extern void Refresh_SetTextureDataYUV(IntPtr driverData, IntPtr y, IntPtr u, IntPtr v, uint yWidth, uint yHeight, uint uvWidth, uint uvHeight, void* data, uint dataLength);

    [DllImport(LibraryName)]
    public static extern void Refresh_CopyTextureToTexture(IntPtr driverData, IntPtr commandBuffer, Refresh_TextureSlice* sourceTextureSlice, Refresh_TextureSlice* destinationTextureSlice, Refresh_Filter filter);

    [DllImport(LibraryName)]
    public static extern void Refresh_CopyTextureToBuffer(IntPtr device, IntPtr commandBuffer, Refresh_TextureSlice* textureSlice, IntPtr buffer);

    [DllImport(LibraryName)]
    public static extern void Refresh_SetBufferData(IntPtr device, IntPtr buffer, uint offsetInBytes, void* data, uint dataLength);

    [DllImport(LibraryName)]
    public static extern uint Refresh_PushVertexShaderParams(IntPtr device, IntPtr commandBuffer, void* data, uint paramBlockCount);

    [DllImport(LibraryName)]
    public static extern uint Refresh_PushFragmentShaderParams(IntPtr device, IntPtr commandBuffer, void* data, uint paramBlockCount);

    [DllImport(LibraryName)]
    public static extern uint Refresh_PushComputeShaderParams(IntPtr device, IntPtr commandBuffer, void* data, uint paramBlockCount);

    [DllImport(LibraryName)]
    public static extern void Refresh_GetBufferData(IntPtr device, IntPtr buffer, void* data, uint dataLengthInBytes);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyTexture(IntPtr device, IntPtr texture);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroySampler(IntPtr device, IntPtr sampler);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyBuffer(IntPtr device, IntPtr buffer);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyColorTarget(IntPtr device, IntPtr colorTarget);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyDepthStencilTarget(IntPtr device, IntPtr depthStencilTarget);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyFramebuffer(IntPtr device, IntPtr frameBuffer);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyShaderModule(IntPtr device, IntPtr shaderModule);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyRenderPass(IntPtr device, IntPtr renderPass);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyComputePipeline(IntPtr device, IntPtr computePipeline);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueueDestroyGraphicsPipeline(IntPtr device, IntPtr graphicsPipeline);

    [DllImport(LibraryName)]
    public static extern void Refresh_BeginRenderPass(IntPtr device, IntPtr commandBuffer, IntPtr renderPass, IntPtr framebuffer, Refresh_Rect renderArea, Refresh_Color* pColorClearValues, uint colorClearCount, ref Refresh_DepthStencilValue depthStencilClearValue);

    [DllImport(LibraryName)]
    public static extern void Refresh_EndRenderPass(IntPtr device, IntPtr commandBuffer);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindGraphicsPipeline(IntPtr device, IntPtr commandBuffer, IntPtr graphicsPipeline);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindVertexBuffers(IntPtr device, IntPtr commandBuffer, uint firstBinding, uint bindingCount, IntPtr pBuffers, IntPtr pOffsets);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindIndexBuffer(IntPtr device, IntPtr commandBuffer, IntPtr buffer, ulong offset, Refresh_IndexElementSize indexElementSize);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindVertexSamplers(IntPtr device, IntPtr commandBuffer, IntPtr pTextures, IntPtr pSamplers);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindFragmentSamplers(IntPtr device, IntPtr commandBuffer, IntPtr pTextures, IntPtr pSamplers);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindComputePipeline(IntPtr device, IntPtr commandBuffer, IntPtr computePipeline);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindComputeBuffers(IntPtr device, IntPtr commandBuffer, IntPtr pBuffers);

    [DllImport(LibraryName)]
    public static extern void Refresh_BindComputeTextures(IntPtr device, IntPtr commandBuffer, IntPtr pTextures);

    [DllImport(LibraryName)]
    public static extern IntPtr Refresh_AcquireCommandBuffer(IntPtr device, byte @fixed);

    [DllImport(LibraryName)]
    public static extern void Refresh_QueuePresent(IntPtr device, IntPtr commandBuffer, ref Refresh_TextureSlice textureSlice, ref Refresh_Rect destinationRectangle, Refresh_Filter filter);

    [DllImport(LibraryName)]
    public static extern void Refresh_Submit(IntPtr device, uint commandBufferCount, IntPtr pCommandBuffers);

    [DllImport(LibraryName)]
    public static extern void Refresh_Wait(IntPtr device);

    [Flags]
    public enum Refresh_BufferUsageFlags : uint
    {
        REFRESH_BUFFERUSAGE_VERTEX_BIT 	=	0x00000001,
        REFRESH_BUFFERUSAGE_INDEX_BIT  	=	0x00000002,
        REFRESH_BUFFERUSAGE_COMPUTE_BIT =	0x00000004
    }
    
    [Flags]
    public enum Refresh_ColorComponentFlags
    {
        REFRESH_COLORCOMPONENT_R_BIT = 0x00000001,
        REFRESH_COLORCOMPONENT_G_BIT = 0x00000002,
        REFRESH_COLORCOMPONENT_B_BIT = 0x00000004,
        REFRESH_COLORCOMPONENT_A_BIT = 0x00000008
    }
    
    [Flags]
    public enum Refresh_ClearOptions
    {
        REFRESH_CLEAROPTIONS_COLOR   = 0x00000001,
        REFRESH_CLEAROPTIONS_DEPTH   = 0x00000002,
        REFRESH_CLEAROPTIONS_STENCIL = 0x00000004,
    }
    
    public enum Refresh_TextureUsageFlags
    {
        REFRESH_TEXTUREUSAGE_SAMPLER_BIT          = 0x00000001,
        REFRESH_TEXTUREUSAGE_COLOR_TARGET_BIT     = 0x00000002
    }
}